(function(window, angular, undefined) {'use strict';
/**
 * @ngdoc overview
 * @name <%- moduleName %>
 * @module
 * @description
 *
 * The `<%- moduleName %>` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
var module = angular.module(<%-: moduleName | str %>, ['restangular']);

// Module configuration
module.run(['Restangular', function(Restangular) {
  Restangular.setBaseUrl(<%-: urlBase | str %>);
}]);

// Helper for extending models static and prototype methods
function extendModel(ModelService, idName, extModel, endPoint, Restangular) {
  if (idName && idName !== 'id') {
    ModelService.setRestangularFields({id: idName});
  }

  var prop;
  for (prop in extModel) {
    ModelService[prop] = extModel[prop];
  }
  if (Restangular) Restangular.extendModel(endPoint, function(model) {
    for (prop in extModel.prototype) {
      model[prop] = extModel.prototype[prop];
    }
    return model;
  });
  else for (prop in extModel.prototype) {
    ModelService.prototype[prop] = extModel.prototype[prop];
  }
}


// Helper for extending models static and prototype methods
<% /*function createRestangularService(endPoint, Restangular) {
  var ModelService = function(){};
  var staticMethods = Restangular.service(endPoint);
  for (var prop in staticMethods) {
    ModelService[prop] = staticMethods[prop];
  }
}*/ -%>

function createRestangularService(endPoint, Restangular) {
  var service = Restangular.service(endPoint);
  //var service = function(){};
  //var staticMethods = Restangular.service(endPoint);
  //for (var prop in staticMethods) {
  //  service[prop] = staticMethods[prop];
  //}

  console.log(Restangular.all(endPoint).doPUT);
  service.create = service.post;
  service.upsert =
  service.updateOrCreate =
  service.put = Restangular.all(endPoint).doPUT.bind(Restangular);
  service.findById = function(id) {
    return service.one(id).get();
  };
  service.find =
  service.all = service.getList;
  service.findOne = function(params) {
    if (params && params.filter) params.filter.limit = 1;
    else if (params) params.filter = {limit: 1};
    return service.getList(params).then(function(list) {
      return list[0];
    });
  };
  service.deleteById =
  service.destroyById =
  service.removeById = function(id) {
    return service.one(id).remove();
  };
  service.new = function(obj) {
    return obj || {};
  };
  return service;
}


<% for (var modelName in modelConfig) {
     // var meta = models[modelName];

     // capitalize the model name
     // modelName = modelName[0].toUpperCase() + modelName.slice(1);
     if (modelConfig[modelName].dataSource == "remote") {
-%>

/**
 * @ngdoc object
 * @name <%-: moduleName %>.<%-: modelName %>
 * @object
 *
 * @description
 *
 * A Restangular service object for interacting with the `<%-: modelName %>` model.
 *
 * ## Example
 *
 * See
 * {@link https://github.com/mgonto/restangular#decoupled-restangular-service}
 * for an example of using this object.
 *
 * Also see documentation of this module here
 * {@link https://github.com/pandaiolo/loopback-restangular}
 * for specific Loopback methods available in Angular as well
 *
 */
module.factory(
  <%-: modelName | str %>,
  <%-: declareNgFunction(modelConfig[modelName].dependencies, true) %>

  // Restangular model service
  var ModelService = createRestangularService(<%-: modelConfig[modelName].apiEndPoint | str %>, Restangular);
  //var ModelService = Restangular.service(<%-: modelConfig[modelName].apiEndPoint | str %>);

  <%
     modelConfig[modelName].extensions.forEach(function(extension) {
       var idName = modelConfig[modelName].toModel && modelConfig[modelName].toModel.getIdName() || 'id';
  -%>
       var extModel = (<%-: extension %>)(function() {});


       extendModel(ModelService,
                   <%-: idName | str %>,
                   extModel,
                   <%-: modelConfig[modelName].apiEndPoint | str %>,
                   Restangular);
  <%
   }); // modelConfig[modelName].extensions.forEach(
  -%>

  return ModelService;
}]);

<%
  } else { // [was: if (modelConfig[modelName].dataSource = "remote")]
-%>

/**
 * @ngdoc object
 * @name <%-: moduleName %>.<%-: modelName %>
 * @object
 *
 * @description
 *
 * A local object model for `<%-: modelName %>` model.
 *
 * This is not a remote API model, but it has been declared in model config
 * and will be used to wrap any embeded model and enrich them with custom
 * logic, see URL for more info
 * {@link https://github.com/pandaiolo/loopback-restangular}
 *
 */
module.factory(
  <%-: modelName | str %>,
  <%-: declareNgFunction(modelConfig[modelName].dependencies, false) %>

  // Local model
  var ModelService = function(){};

  <%
     modelConfig[modelName].extensions.forEach(function(extension) {
  -%>
       var extModel = (<%-: extension %>)(function() {});

       extendModel(ModelService, null, extModel, null, null);
  <%
   }); // modelConfig[modelName].extensions.forEach(
  -%>


  return ModelService;
}]);

<%
    } // [was: if (modelConfig[modelName].dataSource = "remote") else]
  } // [was: for modelName in modelConfig]
-%>

module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId'];

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.rememberMe = undefined;
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    }

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    }

    return new LoopBackAuth();

    function save(storage, name, value) {
      var key = '$LoopBack$' + name;
      if (value == null) value = '';
      storage[key] = value;
    }

    function load(name) {
      var key = '$LoopBack$' + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          if (LoopBackAuth.accessTokenId) {
            config.headers.authorization = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 } },
              status: 401,
              config: config,
              headers: function() { return undefined; }
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        }
      };
    }])
  .factory('LoopBackResource', [ '$resource', function($resource) {
    return function(url, params, actions) {
      var resource = $resource(url, params, actions);

      // Angular always calls POST on $save()
      // This hack is based on
      // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
      resource.prototype.$save = function(success, error) {
        // Fortunately, LoopBack provides a convenient `upsert` method
        // that exactly fits our needs.
        var result = resource.upsert.call(this, {}, this, success, error);
        return result.$promise || result;
      };

      return resource;
    };
  }]);

})(window, window.angular);
